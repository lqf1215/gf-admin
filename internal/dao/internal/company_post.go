// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/SupenBysz/gf-admin-community/utility/daoctl"
	"github.com/SupenBysz/gf-admin-community/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CompanyPostDao is the data access object for table co_company_post.
type CompanyPostDao struct {
	table   string             // table is the underlying table name of the DAO.
	group   string             // group is the database configuration group name of current DAO.
	columns CompanyPostColumns // columns contains all the column names of Table for convenient usage.
}

// CompanyPostColumns defines and stores column names for table co_company_post.
type CompanyPostColumns struct {
	Id        string // ID
	Code      string // 岗位编码
	Name      string // 岗位名称
	State     string // 状态（0正常 1停用）
	Sort      string // 显示顺序
	Remark    string // 备注
	CreatedBy string // 创建人
	UpdatedBy string // 修改人
	CreatedAt string //
	UpdatedAt string //
	DeletedAt string //
}

// companyPostColumns holds the columns for table co_company_post.
var companyPostColumns = CompanyPostColumns{
	Id:        "id",
	Code:      "code",
	Name:      "name",
	State:     "state",
	Sort:      "sort",
	Remark:    "remark",
	CreatedBy: "created_by",
	UpdatedBy: "updated_by",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

// NewCompanyPostDao creates and returns a new DAO object for table data access.
func NewCompanyPostDao(proxy ...dao_interface.IDao) *CompanyPostDao {
	var dao *CompanyPostDao
	if len(proxy) > 0 {
		dao = &CompanyPostDao{
			group:   proxy[0].Group(),
			table:   proxy[0].Table(),
			columns: companyPostColumns,
		}
		return dao
	}

	return &CompanyPostDao{
		group:   "default",
		table:   "co_company_post",
		columns: companyPostColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CompanyPostDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CompanyPostDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *CompanyPostDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *CompanyPostDao) Columns() CompanyPostColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CompanyPostDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *CompanyPostDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) dao_interface.DaoConfig {
	daoConfig := dao_interface.DaoConfig{
		Dao:   dao,
		DB:    dao.DB(),
		Table: dao.table,
		Group: dao.group,
		Model: dao.DB().Model(dao.Table()).Safe().Ctx(ctx),
	}

	if len(cacheOption) == 0 {
		daoConfig.CacheOption = daoctl.MakeDaoCache(dao.Table())
		daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
	} else {
		if cacheOption[0] != nil {
			daoConfig.CacheOption = cacheOption[0]
			daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
		}
	}

	daoConfig.Model = daoctl.RegisterDaoHook(daoConfig.Model)

	return daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CompanyPostDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
